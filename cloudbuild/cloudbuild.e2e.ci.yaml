# Modified from https://github.com/GoogleCloudPlatform/cloudbuild-integration-testing/blob/master/cloudbuild.gke-per-test.yaml
steps:
  - id: "clone from GitHub repo"
    name: gcr.io/cloud-builders/git
    args: ["clone", "https://github.com/lightcoker/CatchyPass.git"]

  - id: "create cluster"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # capture the cluster name to be created
        # (it will be used again for the deletion)
        echo "test-$SHORT_SHA" > _cluster-name
        gcloud container clusters create $(cat _cluster-name)
    waitFor: ["-"] # start immediately

  - id: "patch k8s config"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args: ["-c", 'find k8s -type f | xargs sed -i "s/PROJECT_ID/$PROJECT_ID/g"']
    waitFor: ["create cluster"]

  # ingress-nginx
  - id: "helm add repo"
    name: "gcr.io/$PROJECT_ID/helm"
    args:
      - "repo"
      - "add"
      - "stable"
      - "https://kubernetes-charts.storage.googleapis.com"
    waitFor: ["patch k8s config"]

  - id: "deploy ingress-nginx"
    name: "gcr.io/$PROJECT_ID/helm"
    args:
      - "install"
      - "my-nginx"
      - "stable/nginx-ingress"
      - "--set"
      - "controller.service.loadBalancerIP=35.220.223.187,rbac.create=true"
    waitFor: ["helm add repo"]

  # PVC
  - id: "deploy pvc"
    name: "gcr.io/cloud-builders/kubectl"
    args:
      - "apply"
      - "-f"
      - "./k8s/test/mongodb-pvc.yaml"
    waitFor: ["deploy ingress-nginx"]

  # ingress setup
  - id: "deploy ingress local service"
    name: "gcr.io/cloud-builders/kubectl"
    args:
      - "apply"
      - "-f"
      - "./k8s/test/ingress-service-local.yaml"
    waitFor: ["deploy ingress-nginx"]

  # mongo docker
  - id: "set mongo secret"
    name: "gcr.io/cloud-builders/kubectl"
    args:
      - "create"
      - "secret"
      - "generic"
      - "mongopassword"
      - "--from-literal"
      - "MONGO_PASSWORD=${_MONGO_SECRET}"
    waitFor: ["deploy pvc"]

  - id: "deploy mongo"
    name: "gcr.io/cloud-builders/kubectl"
    args:
      - "apply"
      - "-f"
      - "./k8s/test/deployment/mongodb-deployment.yaml"
    waitFor: ["set mongo secret"]

  # redis
  - id: "deploy redis"
    name: "gcr.io/cloud-builders/kubectl"
    args:
      - "apply"
      - "-f"
      - "./k8s/test/deployment/redis-deployment.yaml"
    waitFor: ["patch k8s config"]

  # service
  - id: "deploy services"
    name: "gcr.io/cloud-builders/kubectl"
    args:
      - "apply"
      - "-f"
      - "./k8s/test/service/"
    waitFor: ["deploy ingress local service"]

  # server
  - id: "build server docker"
    name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "asia.gcr.io/catchypass-dev/server-test:$SHORT_SHA"
      - "./server"
    waitFor: ["patch k8s config"]
  - id: "push server docker"
    name: "gcr.io/cloud-builders/docker"
    args:
      - "push"
      - "asia.gcr.io/catchypass-dev/server-test:$SHORT_SHA"
    waitFor: ["build server docker"]
  - id: "server unit test"
    name: "asia.gcr.io/catchypass-dev/server-test:$SHORT_SHA"
    entrypoint: "sh"
    args:
      - "npm run test"
    waitFor: ["push server docker"]
  - id: "replace tag for server"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        sed -i "s/ENV_VARS_SHORT_SHA/$SHORT_SHA/g" ./k8s/test/deployment/server-deployment.yaml
        # cat ./k8s/test/deployment/server-deployment.yaml
    waitFor: ["server unit test"]
  - id: "deploy server"
    name: "gcr.io/cloud-builders/kubectl"
    args:
      - "apply"
      - "-f"
      - "./k8s/test/deployment/server-deployment.yaml"
    waitFor: ["replace tag for server"]

  # worker
  - id: "build worker docker"
    name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "asia.gcr.io/catchypass-dev/worker-test:$SHORT_SHA"
      - "./worker"
    waitFor: ["patch k8s config"]
  - id: "push worker docker"
    name: "gcr.io/cloud-builders/docker"
    args:
      - "push"
      - "asia.gcr.io/catchypass-dev/worker-test:$SHORT_SHA"
    waitFor: ["build worker docker"]
  - id: "worker unit test"
    name: "asia.gcr.io/catchypass-dev/worker-test:$SHORT_SHA"
    entrypoint: "sh"
    args:
      - "python unit_testing.py"
    waitFor: ["push worker docker"]
  - id: "replace tag for worker"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        sed -i "s/ENV_VARS_SHORT_SHA/$SHORT_SHA/g" ./k8s/test/deployment/worker-deployment.yaml
        # cat ./k8s/test/deployment/worker-deployment.yaml
    waitFor: ["worker unit test"]
  - id: "deploy worker"
    name: "gcr.io/cloud-builders/kubectl"
    args:
      - "apply"
      - "-f"
      - "./k8s/test/deployment/worker-deployment.yaml"
    waitFor: ["replace tag for worker"]

  # client
  - id: "build client docker"
    name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "asia.gcr.io/catchypass-dev/client-test:$SHORT_SHA"
      - "./client"
    waitFor: ["patch k8s config"]
  - id: "push client docker"
    name: "gcr.io/cloud-builders/docker"
    args:
      - "push"
      - "asia.gcr.io/catchypass-dev/client-test:$SHORT_SHA"
    waitFor: ["build client docker"]
  - id: "client unit test"
    name: "asia.gcr.io/catchypass-dev/client-test:$SHORT_SHA"
    entrypoint: "sh"
    args:
      - "npm run test"
    waitFor: ["push client docker"]
  - id: "replace tag for client"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        sed -i "s/ENV_VARS_SHORT_SHA/$SHORT_SHA/g" ./k8s/test/deployment/client-deployment.yaml
        # cat ./k8s/test/deployment/client-deployment.yaml
    waitFor: ["client unit test"]
  - id: "deploy client"
    name: "gcr.io/cloud-builders/kubectl"
    args:
      - "apply"
      - "-f"
      - "./k8s/test/deployment/client-deployment.yaml"
    waitFor: ["replace tag for client"]

  # Integration testing
  - id: "get endpoint"
    name: "gcr.io/cloud-builders/kubectl"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # determine which node port the service was exposed on
        get_nodeport() {
          kubectl get service  my-nginx-nginx-ingress-controller -o=jsonpath='{.spec.ports[0].nodePort}' 
        }
        until [[ -n "$(get_nodeport)" ]]; do
            echo "querying for nodeport"
            sleep 3
        done
        echo "$(get_nodeport)" > _nodeport # save port for use in next step
        # grab the public IP of a random node
        # (why do this instead of a load balancer? b/c it's faster to instantiate)
        # (and doesn't require additional billable resources)
        # (we can reasonably expect the node to be durable enough to last until the test completes)
        get_nodeip() {
          kubectl get service my-nginx-nginx-ingress-controller  --output jsonpath='{.status.loadBalancer.ingress[0].ip}'
        }
        until [[ -n "$(get_nodeip)" ]]; do
            echo "querying for nodeip"
            sleep 3
        done
        echo $(get_nodeip) > _nodeip # save ip for use in next step
    waitFor: ["deploy client"]

  # e2e job
  - id: "build e2e docker"
    name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "asia.gcr.io/catchypass-dev/e2e-test:$SHORT_SHA"
      - "./e2e"
    waitFor: ["deploy client"]
  - id: "push e2e docker"
    name: "gcr.io/cloud-builders/docker"
    args:
      - "push"
      - "asia.gcr.io/catchypass-dev/e2e-test:$SHORT_SHA"
    waitFor: ["build e2e docker"]
  - id: "replace tag for e2e"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        sed -i "s/ENV_VARS_SHORT_SHA/$SHORT_SHA/g" ./k8s/test/test/e2e.yaml
        sed -i "s/ENV_VARS_RESERVED_IP/${_RESERVED_IP}/g" ./k8s/test/test/e2e.yaml
        cat ./k8s/test/test/e2e.yaml
    waitFor: ["push e2e docker"]
  - id: "deploy e2e"
    name: "gcr.io/cloud-builders/kubectl"
    args:
      - "apply"
      - "-f"
      - "./k8s/test/test/e2e.yaml"
    waitFor: ["replace tag for e2e"]
  - id: "wait e2e to finish"
    name: "gcr.io/cloud-builders/kubectl"
    args:
      - "wait"
      - "--for=condition=complete"
      - "job/e2e"
      - "--timeout=10m"
    waitFor: ["deploy e2e"]
  - id: "show log of jobs"
    name: "gcr.io/cloud-builders/kubectl"
    args:
      - "logs"
      - "-f"
      - "job/e2e"
      - "--all-containers=true"
    waitFor: ["wait e2e to finish"]

  # cleaning up
  - id: "delete cluster"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        gcloud container clusters delete $(cat _cluster-name) --quiet # don't prompt for confirmation
    waitFor: ["show log of jobs"]

options:
  env:
    # location/name of GKE cluster (used by all kubectl commands)
    - CLOUDSDK_COMPUTE_ZONE=asia-east2-a
    - CLOUDSDK_CONTAINER_CLUSTER=test-$SHORT_SHA
    - CI=true

timeout: 30m0s
